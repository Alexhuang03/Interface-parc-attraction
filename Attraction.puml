@startuml
title Diagramme de classes - Application de réservation d'attractions (MVC)

' ==== PACKAGES PRINCIPAUX ====
package "Model" {
  ' ==== CLASSES UTILISATEURS ====
  abstract class Client {
    +id : int
    +nom : String
    +prenom : String
    +email : String
    +tel : int
    +age : int
    +typeAge : enum {enfant, senior, regulier}

    +naviguerAttractions() : void
    +reserverAttraction(date: Date, attraction: Attraction) : Reservation
    +calculerReduction() : float
    +consulterFacture() : void
  }

  class ClientInvite {
    +reserverSansConnexion() : Reservation
  }

  class ClientNouveau {
    +sInscrire(id: String, mdp: String) : void
  }

  class ClientAncien {
    +loginMembre(id: String, mdp: String) : bool
    +consulterHistorique() : void
  }

  Client <|-- ClientInvite
  Client <|-- ClientNouveau
  Client <|-- ClientAncien

  class Admin {
    +id : int
    +nom : String
    +email : String
    +gererAttractions() : void
    +gererReductions() : void
    +gererUtilisateurs() : void
    +identifierAttractionsPopulaires() : List<Attraction>
  }

  class Attraction {
    +id : int
    +nom : String
    +type : String
    +capacite : int
    +duree : Time
    +prix : float
    +statut : enum {active, inactive}

    +afficherDetails() : void
    +mettreAJour() : void
  }

  class Reservation {
    +id : int
    +date : Date
    +statut : enum {en_attente, confirmee, annulee}

    +confirmer() : void
    +annuler() : void
  }

  class Billet {
    +id : int
    +statut : enum {valide, utilise, expire}

    +genererQR() : String
    +valider() : void
  }

  class Paiement {
    +id : int
    +montant : float
    +date_paiement : Date
    +statut : enum {en_attente, effectue, refuse}

    +payer() : bool
    +rembourser() : void
  }

  class Reduction {
    +id : int
    +pourcentage : float
    +raison : String

    +appliquer(montant: float) : float
  }

  class Historique {
    +id : int
    +date_visite : Date
    +afficher() : void
  }

  ' ==== ASSOCIATIONS ====
  Client --> "0..*" Reservation : fait >
  ClientAncien --> "0..*" Historique : possède >
  Reservation --> "1" Billet : génère >
  Reservation --> "1" Paiement : implique >
  Reservation --> "1" Attraction : concerne >
  Reservation --> "0..1" Reduction : utilise >

  Admin --> Attraction : gère >
  Admin --> Reduction : configure >
  Admin --> Client : supervise >
}

package "DAO" {
  class AttractionDAO {
    +findAll() : List<Attraction>
    +findById(id: int) : Attraction
    +save(attraction: Attraction) : void
    +update(attraction: Attraction) : void
    +delete(id: int) : void
  }

  class ReservationDAO {
    +findAll() : List<Reservation>
    +findByClient(idClient: int) : List<Reservation>
    +save(reservation: Reservation) : void
    +update(reservation: Reservation) : void
    +delete(id: int) : void
  }

  class ClientDAO {
    +findById(id: int) : Client
    +save(client: Client) : void
    +update(client: Client) : void
    +delete(id: int) : void
  }
}

package "Controller" {
  class RechercheController {
    +chercherParNom(nom: String) : List<Attraction>
    +chercherParType(type: String) : List<Attraction>
    +voirAttractionsDisponibles(date: Date) : List<Attraction>
  }

  class MiseAJourController {
    +ajouterAttraction(attr: Attraction) : void
    +modifierAttraction(attr: Attraction) : void
    +supprimerAttraction(id: int) : void
  }

  class ReportingController {
    +genererStatistiquesAttractions() : Map<String, Integer>
    +genererHistogrammeVisites() : void
    +genererCamembertReductions() : void
  }
}

package "Vue" {
  class InterfaceGraphique {
    +afficherAccueil() : void
    +afficherListeAttractions(list: List<Attraction>) : void
    +afficherReservation(res: Reservation) : void
    +afficherStatistiques(stats: Map<String, Integer>) : void
    +afficherFormulaireInscription() : void
  }
}

' ==== DEPENDANCES ENTRE PACKAGES ====
RechercheController --> AttractionDAO
MiseAJourController --> AttractionDAO
ReportingController --> ReservationDAO
ReportingController --> Reduction
RechercheController --> ReservationDAO
RechercheController --> ClientDAO

InterfaceGraphique --> RechercheController
InterfaceGraphique --> MiseAJourController
InterfaceGraphique --> ReportingController

@enduml
